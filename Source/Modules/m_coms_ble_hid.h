/**
 * Copyright (c) 2016 - 2018, Nordic Semiconductor ASA
 * 
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form, except as embedded into a Nordic
 *    Semiconductor ASA integrated circuit in a product or a software update for
 *    such product, must reproduce the above copyright notice, this list of
 *    conditions and the following disclaimer in the documentation and/or other
 *    materials provided with the distribution.
 * 
 * 3. Neither the name of Nordic Semiconductor ASA nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 * 
 * 4. This software, with or without modification, must only be used with a
 *    Nordic Semiconductor ASA integrated circuit.
 * 
 * 5. Any software provided in binary form under this license must not be reverse
 *    engineered, decompiled, modified and/or disassembled.
 * 
 * THIS SOFTWARE IS PROVIDED BY NORDIC SEMICONDUCTOR ASA "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

/** @file
 *
 * @defgroup MOD_COMS_BLE_HID BLE HID over GATT submodule
 * @ingroup ble
 * @{
 * @brief BLE HID (HID over GATT) submodule.
 *
 * @details This submodule implements the HID over GATT Service. It provides an API for setting up descriptors and reports.
 *          Because it does not include a HID parser, reports are set up manually (see @ref BLE_HID_REPORT_MAP_CONF and
 *          @ref BLE_HID_REPORT_CONF).
 *          The descriptors and associated report configurations are stored in flash. The HoG Service is created once
 *          @ref m_coms_ble_hid_init is called. At this point, the SoftDevice must be enabled.
 *
 *          Like other BLE Services, this module must be notified when relevant BLE events occur.
 *          This module will generate HID-related events (boot mode enabled, output reports written, etc.)
 */
#ifndef __M_COMS_BLE_HID__
#define __M_COMS_BLE_HID__

#include <stdbool.h>
#include <stdint.h>
#include "ble_hids.h"
#include "m_coms_ble.h"

/**@brief Event type generated by this module. */
typedef struct
{
    ble_hids_evt_t * hids_evt;      /**< Relevant BLE event. */
    uint8_t          interface_idx; /**< Interface related to the event. */
    uint8_t          report_type;   /**< Report type. Input, output, or feature. */
    uint8_t          report_idx;    /**< Report related to the event. */
    uint8_t          len;           /**< Length of received data. */
    uint8_t *        data;          /**< Received data. */
} m_coms_ble_hid_evt_t;


typedef void (*m_coms_hid_evt_handler_t) (m_coms_ble_hid_evt_t * p_evt);

/**@brief Database record containing HID report map info. */
typedef struct
{
    ble_hids_t * const interface;   /**< BLE HID Interface handle. */
    uint8_t *    report_map;        /**< Pointer to the actual descriptor. */
    uint16_t     report_map_len;    /**< Length of the descriptor. */
    uint8_t      boot_type;         /**< Indicates whether the descriptor contains boot reports. */
} ble_hid_report_map_record_t;

/**@brief Database record containing HID report information. */
typedef struct
{
    uint8_t                  interface_idx;/**< ID to distinguish between multiple HID services. */
    m_coms_hid_report_type_t report_type;  /**< Type (input/output/feature). */
    bool                     read_resp;    /**< Indicates whether the application should respond to read operations. */
    uint8_t                  report_id;    /**< Report ID as stated in the associated HID report map. */
    uint8_t                  report_len;   /**< Length of the report. */
} ble_hid_report_record_t;

/**@brief Database record containing external service mapping information. */
typedef struct
{
    uint8_t  interface_idx;         /**< ID to distinguish between multiple HID services. */
    uint16_t external_char_uuid;    /**< UUID of the characteristic in the other BLE service. */
} ble_hid_ext_map_record_t;

/**@brief Database layout */
typedef struct ble_hid_db_s
{
    size_t report_maps_size;        /**< Number of report maps.*/
    size_t reports_in_size;         /**< Number of reports IN.*/
    size_t reports_out_size;        /**< Number of reports OUT.*/
    size_t reports_feature_size;    /**< Number of reports Feature.*/
    size_t ext_maps_size;           /**< Number of external maps.*/

    ble_hid_report_map_record_t const * report_maps;    /**< Report maps array.*/
    ble_hid_report_record_t     const * reports_in;     /**< Reports IN array.*/
    ble_hid_report_record_t     const * reports_out;    /**< Reports OUT array.*/
    ble_hid_report_record_t     const * reports_feature;/**< Reports feature array.*/
    ble_hid_ext_map_record_t    const * ext_mappings;   /**< External maps array.*/
} ble_hid_db_t;

typedef struct
{
    m_coms_hid_evt_handler_t evt_handler;
    ble_srv_error_handler_t  error_handler;
    ble_hid_db_t const *     db_loc;
    uint16_t                 base_hid_version;
    uint8_t                  b_country_code;
    uint8_t                  flags;
    uint8_t                  io_capabilities;
} m_coms_ble_hid_init_t;

/**
 * @brief Initializer of @ref ble_hid_report_map_record_t.
 * */
#define BLE_HID_REPORT_MAP_CONF(_interface,         \
                                _report_map,        \
                                _report_map_len,    \
                                _boot_type)         \
        {                                           \
                .interface = _interface,            \
                .report_map = _report_map,          \
                .report_map_len = _report_map_len,  \
                .boot_type = _boot_type,            \
        }

/**
 * @brief Initializer of @ref ble_hid_report_record_t.
 * */
#define BLE_HID_REPORT_CONF(_interface_idx,         \
                            _report_type,           \
                            _read_resp,             \
                            _report_id,             \
                            _report_len)            \
        {                                           \
                .interface_idx = _interface_idx,    \
                .report_type = _report_type,        \
                .read_resp = _read_resp,            \
                .report_id = _report_id,            \
                .report_len = _report_len,          \
        }

/**
 * @brief Initializer of @ref ble_hid_ext_map_record_t.
 * */
#define BLE_HID_EXT_MAP_CONF(_interface_idx,                \
                             _external_char_uuid)           \
        {                                                   \
                .interface_idx = _interface_idx,            \
                .external_char_uuid = _external_char_uuid,  \
        }

/**@brief Function for initializing the HID submodule.
 *
 * @param[in] p_params                          HID Parameters.
 * @param[out] p_last_input_report_cccd_handle  Pointer to the last CCCD handle added by the HID service.
 *
 * @note The obtained CCCD handle could be later used to detect HID services activation.
 *
 * @return NRF_SUCCESS on success, otherwise error code.
 */
uint32_t m_coms_ble_hid_init(const m_coms_ble_hid_init_t * p_params,
                             uint16_t *p_last_input_report_cccd_handle);

/**@brief Function for sending an input report.
 *
 * @param[in] p_interface_idx Which interface to use.
 * @param[in] p_report_idx    Which report ID to use.
 * @param[in] p_data          The data to send.
 * @param[in] p_len           Length of data.
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_INVALID_PARAM
 */
uint32_t m_coms_ble_hid_input_report_send(uint8_t   p_interface_idx,
                                          uint8_t   p_report_idx,
                                          uint8_t * p_data,
                                          uint8_t   p_len);

/**@brief Function for sending a HID keyboard boot report.
 *
 * @note One of the HID services must be configured to have a keyboard boot report.
 *
 * @param[in] p_pkt  Boot packet type.
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_DATA_SIZE
 * @retval NRF_ERROR_INVALID_STATE
 */
uint32_t m_coms_ble_hid_keyboard_boot_report_send(const m_coms_hid_boot_pkt_t * p_pkt);

/**@brief Function for sending a HID mouse boot report.
 *
 * @note One of the HID services must be configured to have a mouse boot report.
 *
 * @param[in] p_pkt  Boot packet type.
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_DATA_SIZE
 * @retval NRF_ERROR_INVALID_STATE
 */
uint32_t m_coms_ble_hid_mouse_boot_report_send(const m_coms_hid_boot_pkt_t * p_pkt);

/**@brief Function for setting the content of a feature report.
 *
 * @param[in] p_interface_idx Which interface to use.
 * @param[in] p_report_idx    Which report ID to use.
 * @param[in] p_data          Report data.
 * @param[in] p_len           Length of data.
 * @return
 * @retval NRF_SUCCESS
 * @retval NRF_ERROR_INVALID_PARAM
 */
uint32_t m_coms_ble_hid_feature_report_set(uint8_t   p_interface_idx,
                                          uint8_t   p_report_idx,
                                          uint8_t * p_data,
                                          uint16_t   p_len);
#endif /* __M_COMS_BLE_HID__*/

/** @} */
